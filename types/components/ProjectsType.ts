// Generated by kea-typegen on Tue, 27 Apr 2021 22:00:25 GMT. DO NOT EDIT THIS FILE MANUALLY.

import { Logic } from 'kea'

export interface logicType extends Logic {
  actionCreators: {
    loadStories: (
      params?: object
    ) => {
      type: "load stories (components.Projects)";
      payload: object;
    };
    loadStoriesSuccess: (
      stories: any[]
    ) => {
      type: "load stories success (components.Projects)";
      payload: {
        stories: any[];
      };
    };
    loadStoriesFailure: (
      error: string
    ) => {
      type: "load stories failure (components.Projects)";
      payload: {
        error: string;
      };
    };
  };
  actionKeys: {
    "load stories (components.Projects)": "loadStories";
    "load stories success (components.Projects)": "loadStoriesSuccess";
    "load stories failure (components.Projects)": "loadStoriesFailure";
  };
  actionTypes: {
    loadStories: "load stories (components.Projects)";
    loadStoriesSuccess: "load stories success (components.Projects)";
    loadStoriesFailure: "load stories failure (components.Projects)";
  };
  actions: {
    loadStories: (params?: object) => void;
    loadStoriesSuccess: (stories: any[]) => void;
    loadStoriesFailure: (error: string) => void;
  };
  constants: {};
  defaults: {
    stories: any[];
    storiesLoading: boolean;
  };
  events: {
    afterMount: () => void;
  };
  key: undefined;
  listeners: {};
  path: ["components", "Projects"];
  pathString: "components.Projects";
  props: Record<string, unknown>;
  reducer: (
    state: any,
    action: () => any,
    fullState: any
  ) => {
    stories: any[];
    storiesLoading: boolean;
  };
  reducerOptions: {};
  reducers: {
    stories: (state: any[], action: any, fullState: any) => any[];
    storiesLoading: (state: boolean, action: any, fullState: any) => boolean;
  };
  selector: (
    state: any
  ) => {
    stories: any[];
    storiesLoading: boolean;
  };
  selectors: {
    stories: (state: any, props?: any) => any[];
    storiesLoading: (state: any, props?: any) => boolean;
  };
  sharedListeners: {};
  values: {
    stories: any[];
    storiesLoading: boolean;
  };
  _isKea: true;
  _isKeaWithKey: false;
}
